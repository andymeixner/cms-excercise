// Variables

$white:    #fff !default;
$gray-100: #f8f9fa !default;
$gray-200: #e9ecef !default;
$gray-300: #dee2e6 !default;
$gray-400: #ced4da !default;
$gray-500: #adb5bd !default;
$gray-600: #868e96 !default;
$gray-700: #495057 !default;
$gray-800: #343a40 !default;
$gray-900: #212529 !default;
$black:    #000 !default;

$blue:    #007bff !default;
$indigo:  #6610f2 !default;
$purple:  #6f42c1 !default;
$pink:    #e83e8c !default;
$red:     #dc3545 !default;
$orange:  #fd7e14 !default;
$yellow:  #ffc107 !default;
$green:   #28a745 !default;
$teal:    #0085A1 !default;
$cyan:    #17a2b8 !default;

$primary:       $teal !default;
$secondary:     $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-800 !default;


// Font Sizes (REMs with PX fallback for older browsers)
@mixin font-size ($sizeValue) {
  $remValue: $sizeValue / $font-size-base;
  $pxValue: $sizeValue;
  font-size: #{$pxValue}px;
  font-size: #{$remValue}rem;
}

// Line Height Sizes (REMs with PX fallback for older browsers)
@mixin line-height ($sizeValue) {
  $remValue: $sizeValue / $font-size-base;
  $pxValue: $sizeValue;
  line-height: #{$pxValue}px;
  line-height: #{$remValue}rem;
}








// *************  Helper Classes  ************************

// margins
.mbxs {margin-bottom: 10px;}
.mtxs {margin-top: 10px;}
.mbs {margin-bottom: 15px;}
.mts {margin-top: 15px;}
.mb {margin-bottom: 20px;}
.mt {margin-top: 20px;}
.mbl {margin-bottom: 30px;}
.mtl {margin-top: 30px;}
.mbxl {margin-bottom: 50px;}
.mtxl {margin-top: 50px;}

// other
.nowrap {
    white-space: nowrap;
}

.hide {
    display: none !important;
}

.show-flex {
    display: flex !important;
}






// *************  Bootstrap 4 Screen Breakpoint Sizes  ************************

// min-width
$screen-sm-min:         576px;
$screen-md-min:         768px;
$screen-lg-min:         992px;
$screen-xl-min:         1200px;

// max-width
$screen-xs-max:         575px;
$screen-sm-max:         767px;
$screen-md-max:         991px;
$screen-lg-max:         1199px;









// *************  General Mixins  ************************

// Mixin helper to output vendor-prefixed CSS
// @param {String} $property - Unprefixed CSS property
// @param {*} $value - Raw CSS value
// @param {List} $prefixes [()] - List of prefixes to output
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

// clearfix
@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// center horizontally
@mixin center-x {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// center vertically - needs to be position: relative or absolute, and needs it's parent to be relative or absolute
@mixin center-y {
    top: 50%;
    transform: translateY(-50%);
}

@mixin center-both {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

// Sizing shortcuts
@mixin size($width, $height) {
  width: $width;
  height: $height;
}
@mixin square($size) {
  @include size($size, $size);
}

// Text Overflow : Requires inline-block or block for proper styling
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Single side border-radius
@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}

// Transform with prefix
// @param {String} $transformation - The transform to apply
@mixin transform($transformation){
  @include prefix(transform, $transformation, 'webkit' 'ms');
}

// Transition with prefix
// @param {Time} $time [1s] - Duration
// @param {String} $timing-function [ease-in-out] - Timing function or cubic bezier curve
// @param {String} $property [all] - The property to transition
@mixin transition($property: all, $time: 1s, $timing-function: ease-in-out) {
    @include prefix(transition, $property $time $timing-function, 'webkit');
}






// *************  Shadow Mixins  ************************
// inset box shadow
@mixin inset-shadow($x, $y, $blur, $spread, $alpha) {
    box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

// full inset box shadow
@mixin inset-shadow-full($x, $y, $blur, $spread, $alpha) {
    box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha), inset -$x -$y $blur $spread rgba(0, 0, 0, $alpha);
}

// box drop shadow
@mixin drop-shadow($x, $y, $blur, $spread, $alpha) {
    box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

// simple border left / border right shadow for page main containers
@mixin container-shadow {
    box-shadow: 10px 0px 16px -10px rgba(0, 0, 0, 0.3), -10px 0 16px -10px rgba(0, 0, 0, 0.3);
}










// *************  Element Hover Mixins  ************************

@mixin btn-color($color) {
    background-color: $color;

    &:hover {
        background-color: darken($color, 8%);
    }
}

// creates a shine effect for button hovers
@mixin hover-shine($color) {
    &:before{
        content: '';
        display: block;
        position: absolute;
        background: rgba(255,255,255,0.5);
        width: 60px;
        height: 100%;
        left: 0;
        top: 0;
        opacity: .5;
        filter: blur(30px);
        transform: translateX(-100px) skewX(-15deg);
    }

    &:after{
        content: '';
        display: block;
        position: absolute;
        background: rgba(255,255,255,0.2);
        width: 30px;
        height: 100%;
        left: 30px;
        top: 0;
        opacity: 0;
        filter: blur(5px);
        transform: translateX(-100px) skewX(-15deg);
    }

    &:hover{
        background: darken($color, 2%);
        cursor: pointer;
        text-decoration: none;
        color: #fff;

        &:before{
            transform: translateX(300px)  skewX(-15deg);
            opacity: 0.6;
            transition: .7s;
        }
        &:after{
            transform: translateX(300px) skewX(-15deg);
            opacity: 1;
            transition: .7s;
        }
    }
}

// hover: full border draw (each seperately and from the center out)
@mixin hover-border-center($height, $color, $border-width: 1px, $speed: .5s) {
    vertical-align: middle;
    text-align: center;
    cursor: pointer;
    position: relative;
    display: inline-block;
    height: $height;
    line-height: $height;
    padding: 0 20px;

    &:before , &:after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        -webkit-transform-origin: center;
        transform-origin: center;
        opacity: 0;
        @include transition($time: $speed, $property: all, $timing-function: cubic-bezier(.275,0,0,1));
    }

    &:after {
        border-left: $border-width solid $color;
        border-right: $border-width solid $color;
        -webkit-transform: scaleY(0);
        transform: scaleY(0);
    }
    &:before {
        border-top: $border-width solid $color;
        border-bottom: $border-width solid $color;
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
    }
    &:hover {
        &:before {
            opacity: 1;
            -webkit-transform: scaleX(1);
        }
        &:after {
            opacity: 1;
            -webkit-transform: scaleY(1);
        }
    }
}

// hover:underline draw
// vertical distance can be set in pixel or percentage units
@mixin hover-underline($color, $vertical-distance: 0, $speed: .5s) {
    vertical-align: bottom;
    cursor: pointer;
    position: relative;
    display: inline-block;

    &:after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        content: '';
        position: absolute;
        bottom: $vertical-distance;
        left: 0;
        width: 100%;
        -webkit-transform-origin: left;
        transform-origin: left;
        opacity: 0;
        @include transition($time: $speed, $property: all, $timing-function: cubic-bezier(.275,0,0,1));
        border-bottom: 1px solid $color;
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
    }
    &:hover {
        &:after {
            opacity: 1;
            -webkit-transform: scaleX(1);
        }
    }
}

// hover: full border draw (from corners)
@mixin hover-border-corners($height, $color, $border-width: 1px, $speed: .5s) {
    vertical-align: middle;
    text-align: center;
    cursor: pointer;
    position: relative;
    display: inline-block;
    height: $height;
    line-height: $height;

    span {
        position: relative;
        display: inline-block;
        padding: 0 20px;

        &:before , &:after {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            //opacity: 0;
            -webkit-transform: scale(0);
            transform: scale(0);
            @include transition($time: $speed, $property: all, $timing-function: cubic-bezier(.275,0,0,1));
        }

        &:after {
            border-top: $border-width solid $color;
            border-right: $border-width solid $color;
            -webkit-transform-origin: 100% 0%;
            transform-origin: 100% 0%;

        }
        &:before {
            border-left: $border-width solid $color;
            border-bottom: $border-width solid $color;
            -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
        }
        &:hover {
            &:before {
                opacity: 1;
                -webkit-transform: scaleX(1);
            }
            &:after {
                opacity: 1;
                -webkit-transform: scaleY(1);
            }
        }
    }
}









// ************* Gradient Mixins *************


// Background gradient helper
// @param {Color} $start-color - Start color
// @param {Color} $end-color - End color
// @param {String} $orientation - Type of gradient, either `vertical`, `horizontal` or `radial`
@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}
